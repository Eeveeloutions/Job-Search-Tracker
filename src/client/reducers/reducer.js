import { bindActionCreators } from 'redux'; 
import * as types from '../features/actionTypes';

const initialState = {
  jobList: [],
  totalJobs: 0
};

const jobsReducer = (state=initialState, action) => {
  let jobList;
  let totalJobs;

  console.log('ACTION TYPE: ', action.type);
  switch(action.type) {
    case types.UPDATE_ALLJOBS: {
      const allJobs = action.payload;
      totalJobs = allJobs.length;
      jobList = state.jobList.slice();

      console.log('ENTERED switch UPDATE_ALLJOBS');

      allJobs.forEach(job => {
        const newJob = {
          company: job.company,
          title: job.title,
          salary: job.salary,
          applied: job.applied,
          date: job.date,
          status: job.status,
          id: job.id 
        }
        jobList.push(newJob);
      })

      return {
        ...state,
        jobList, 
        totalJobs
      }
    }

    case types.ADD_LISTING: {
      totalJobs = state.totalJobs + 1;
      const newJob = {
        company: action.payload.company,
        title: action.payload.title,
        salary: action.payload.salary,
        applied: action.payload.applied,
        date: action.payload.date,
        status: action.payload.status,
        id: action.payload.id //autogenerated? not part of the body?
      }
      jobList = state.jobList;
      jobList.push(newJob)

      return {
        ...state, //is this necessary?
        jobList,
        totalJobs
      };
    }

    case types.UPDATE_LISTING: {
      jobList = state.jobList.slice();
      let listing = jobList.findIndex(job => job.id === action.payload.id);
      jobList[listing].status = action.payload.status //does this suffice to update the status that is passed in the actions?
      return {
        ...state,
        jobList, //no need for totalApps here right?
      }
    }

    case types.DELETE_LISTING: {
      //creating shallow copy of array
      jobList = state.jobList.slice();
      totalJobs = state.totalJobs;
      let index = jobList.findIndex((id) => id === action.payload.id); //i think this means we have to assign the id?
      state.jobList.splice(index, 1);
      state.totalJobs--

      return {
        ...state,
        jobList,
        totalJobs,
      }
    }

    default: {
      return state;
    }
  }
}


export default jobsReducer;